/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface VestingContractInterface extends utils.Interface {
  functions: {
    "release()": FunctionFragment;
    "vestingInfo()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "release" | "vestingInfo"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingInfo",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VestingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    release(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vestingInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _token: string;
        _beneficiary: string;
        _amount: BigNumber;
        _distributed: BigNumber;
        _startReleaseDate: BigNumber;
        _releasePeriod: BigNumber;
        _periodReleaseToken: BigNumber;
        _distributedTime: BigNumber;
        _vestingPeriod: BigNumber;
      }
    >;
  };

  release(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vestingInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      _token: string;
      _beneficiary: string;
      _amount: BigNumber;
      _distributed: BigNumber;
      _startReleaseDate: BigNumber;
      _releasePeriod: BigNumber;
      _periodReleaseToken: BigNumber;
      _distributedTime: BigNumber;
      _vestingPeriod: BigNumber;
    }
  >;

  callStatic: {
    release(overrides?: CallOverrides): Promise<void>;

    vestingInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _token: string;
        _beneficiary: string;
        _amount: BigNumber;
        _distributed: BigNumber;
        _startReleaseDate: BigNumber;
        _releasePeriod: BigNumber;
        _periodReleaseToken: BigNumber;
        _distributedTime: BigNumber;
        _vestingPeriod: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    release(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vestingInfo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    release(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vestingInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
